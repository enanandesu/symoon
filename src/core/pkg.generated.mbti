// Generated using `moon info`, DON'T EDIT IT
package "enanandesu/symoon/src/core"

// Values
fn abs(Expr) -> Expr

fn acos(Expr) -> Expr

fn acosh(Expr) -> Expr

fn add(Expr, Expr) -> Expr

fn asin(Expr) -> Expr

fn asinh(Expr) -> Expr

fn atan(Expr) -> Expr

fn atanh(Expr) -> Expr

fn cos(Expr) -> Expr

fn cosh(Expr) -> Expr

fn count_ops(Expr) -> Double

fn default_rational_constants() -> Array[RationalConstant]

fn differentiate(Expr, String) -> Expr

fn div(Expr, Expr) -> Expr

fn double(Double) -> Expr

fn evaluate(Expr, (String) -> Double?) -> Result[Double, SymbolicError]

fn exp(Expr) -> Expr

fn int(Int) -> Expr

fn log(Expr) -> Expr

fn mul(Expr, Expr) -> Expr

fn neg(Expr) -> Expr

fn pow(Expr, Expr) -> Expr

fn rationalize_expr(Expr, constants? : Array[RationalConstant], tolerance? : Double, full? : Bool, rational? : Bool, rational_conversion? : String) -> Expr

fn simplify(Expr, ratio? : Double, measure? : (Expr) -> Double, rational? : Bool, inverse? : Bool, doit? : Bool) -> Expr

fn sin(Expr) -> Expr

fn sinh(Expr) -> Expr

fn sub(Expr, Expr) -> Expr

fn sym(String) -> Expr

fn tan(Expr) -> Expr

fn tanh(Expr) -> Expr

// Errors

// Types and methods
pub enum BinaryOp {
  Add
  Sub
  Mul
  Div
  Pow
}
impl Eq for BinaryOp
impl Hash for BinaryOp
impl Show for BinaryOp

pub enum Expr {
  Int(Int)
  Double(Double)
  Symbol(Symbol)
  Unary(UnaryOp, Expr)
  Binary(BinaryOp, Expr, Expr)
  FunctionCall(String, Array[Expr])
}
impl Add for Expr
impl Div for Expr
impl Eq for Expr
impl Mul for Expr
impl Neg for Expr
impl Show for Expr
impl Sub for Expr

pub struct RationalConstant {
  symbol : Expr
  numeric : Double?
}
fn RationalConstant::new(Expr, Double?) -> Self

pub struct Symbol {
  name : String
}
fn Symbol::new(String) -> Self
impl Eq for Symbol
impl Hash for Symbol
impl Show for Symbol

pub enum SymbolicError {
  UndefinedSymbol(String)
  DomainViolation(String, String)
  UnsupportedOperation(String)
}
impl Eq for SymbolicError
impl Show for SymbolicError

pub enum UnaryOp {
  Neg
  Sin
  Cos
  Tan
  Asin
  Acos
  Atan
  Sinh
  Cosh
  Tanh
  Asinh
  Acosh
  Atanh
  Exp
  Log
  Abs
}
impl Eq for UnaryOp
impl Hash for UnaryOp
impl Show for UnaryOp

// Type aliases

// Traits

